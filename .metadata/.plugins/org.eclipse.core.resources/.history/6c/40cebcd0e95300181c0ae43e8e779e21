package hr.fer.zemris.java.raytracer;

import java.util.List;

import hr.fer.zemris.java.raytracer.model.GraphicalObject;
import hr.fer.zemris.java.raytracer.model.IRayTracerProducer;
import hr.fer.zemris.java.raytracer.model.IRayTracerResultObserver;
import hr.fer.zemris.java.raytracer.model.LightSource;
import hr.fer.zemris.java.raytracer.model.Point3D;
import hr.fer.zemris.java.raytracer.model.Ray;
import hr.fer.zemris.java.raytracer.model.RayIntersection;
import hr.fer.zemris.java.raytracer.model.Scene;
import hr.fer.zemris.java.raytracer.viewer.RayTracerViewer;

/**
 * Program which uses ray-casting to create image of two 3D sphere models under illumination.
 * 
 * @author Sven Kapuđija
 */
public class RayCaster {

	/**
	 * Main method, runs the actual calculation and drawing.
	 * 
	 * @param args	Main arguments (ignored).
	 */
	public static void main(String[] args) {
		RayTracerViewer.show(getIRayTracerProducer(), new Point3D(10,0,0), new Point3D(0,0,0), new Point3D(0,0,10), 20, 20);
	}
	
	/**
	 * Producer used to calculate necessary image data (not parallelized).
	 * 
	 * @return	Producer with calculation results ready for drawing.
	 */
	private static IRayTracerProducer getIRayTracerProducer() {
		return new IRayTracerProducer() {
			@Override
			public void produce(Point3D eye, Point3D view, Point3D viewUp, double horizontal, double vertical, int width, int height, long requestNo, IRayTracerResultObserver observer) {
				System.out.println("Započinjem izračune...");
				short[] red = new short[width*height];
				short[] green = new short[width*height];
				short[] blue = new short[width*height];
				
				Point3D eyeView = view.sub(eye).modifyNormalize();
				
				//Point3D zAxis = null; // not neccessary
				Point3D yAxis = viewUp.normalize().sub(eyeView.scalarMultiply(viewUp.normalize().scalarProduct(eyeView))).normalize();
				Point3D xAxis = eyeView.vectorProduct(yAxis).normalize();
				
				Point3D screenCorner = view.sub(xAxis.scalarMultiply(horizontal/2.0)).add(yAxis.scalarMultiply(vertical/2.0));
				
				Scene scene = RayTracerViewer.createPredefinedScene();
				
				short[] rgb = new short[3];
				int offset = 0;
				for(int y = 0; y < height; y++) {
					for(int x = 0; x < width; x++) {
						Point3D screenPoint = screenCorner.add(xAxis.scalarMultiply(x/(width-1.0)*horizontal)).sub(yAxis.scalarMultiply(y/(height-1.0)*vertical));
						
						Ray ray = Ray.fromPoints(eye, screenPoint);
						
						tracer(scene, ray, rgb);
						
						red[offset] = rgb[0] > 255 ? 255 : rgb[0];
						green[offset] = rgb[1] > 255 ? 255 : rgb[1];
						blue[offset] = rgb[2] > 255 ? 255 : rgb[2];
						
						offset++;
					}
				}
				
				System.out.println("Izračuni gotovi...");
				observer.acceptResult(red, green, blue, requestNo);
				System.out.println("Dojava gotova...");
			}
		};
    }
    
	/**
	 * Traces image using ray-casting model and fills results into <code>rgb</code> array.
	 * 
	 * @param scene	Scene of the image.
	 * @param ray	Ray from the eye (viewer) to the screen point (origin).
	 * @param rgb	RGB color data.
	 */
	private static void tracer(Scene scene, Ray ray, short[] rgb) {
		double[] rgbCalculated = new double[3];
		
		// Default ambient light
		rgbCalculated[0] = 15;
		rgbCalculated[1] = 15;
		rgbCalculated[2] = 15;
		
		RayIntersection closestIntersection = findClosestIntersection(scene, ray);
		if (closestIntersection != null) {
			determineColorFor(scene, ray, rgbCalculated, closestIntersection);
		}
		
		rgb[0] = (short) rgbCalculated[0];
		rgb[1] = (short) rgbCalculated[1];
		rgb[2] = (short) rgbCalculated[2];
	}
    
    /**
     * Finds closest intersection between <code>ray</code> and any object in the scene.
     * 
     * @param scene		Scene of the image.
     * @param ray		Ray used to find intersection.
     * @return			Closest intersection with any object in the scene, <code>null</code> if it doesn't exist.
     */
    private static RayIntersection findClosestIntersection(Scene scene, Ray ray) {
		RayIntersection closestIntersection = null;
		
		List<GraphicalObject> objects = scene.getObjects();
		for(GraphicalObject object : objects) {
			RayIntersection currentIntersection = object.findClosestRayIntersection(ray);
			
			if (currentIntersection != null && (closestIntersection == null  || currentIntersection.getDistance() < closestIntersection.getDistance())) {
				closestIntersection = currentIntersection;
			}
		}
		
		return closestIntersection;
	}
    
    /**
     * Determines color for specific intersection. Adds diffuse and reflective component if necessary.
     * 
     * @param scene					Scene of the image.
     * @param ray					Ray used to find intersection.
     * @param rgbCalculated			RGB color data (which will be filled by results).
     * @param intersection			Intersection between ray and some object (if it exists).
     */
	private static void determineColorFor(Scene scene, Ray ray, double[] rgbCalculated, RayIntersection intersection) {
		List<LightSource> lights = scene.getLights();
		for (LightSource light : lights) {
			Ray rayFromLightToIntersection = Ray.fromPoints(light.getPoint(), intersection.getPoint());
			RayIntersection closestIntersection = findClosestIntersection(scene, rayFromLightToIntersection);
			
			if (closestIntersection != null) {
				double lightSourceIntersectionDistance = light.getPoint().sub(closestIntersection.getPoint()).norm();
				double eyeIntersectionDistance = light.getPoint().sub(intersection.getPoint()).norm();
				
				if (Double.compare(lightSourceIntersectionDistance + 0.01, eyeIntersectionDistance) >= 0) {
					addDiffusseComponent(light, rgbCalculated, closestIntersection);
					addReflectiveComponent(light, ray, rgbCalculated, closestIntersection);
				}
			}
		}
	}
    
	/**
	 * Adds diffuse component to RGB color data.
	 * 
	 * @param light				Light source to provide color data.
	 * @param rgbCalculated		RGB color data (which will be filled by results).
	 * @param intersection		Intersection to focus on.
	 */
	private static void addDiffusseComponent(LightSource light, double[] rgbCalculated, RayIntersection intersection) {
		Point3D n = intersection.getNormal();
		Point3D l = light.getPoint().sub(intersection.getPoint()).normalize();
		
		double ln = l.scalarProduct(n);
		
		rgbCalculated[0] += light.getR()*intersection.getKdr()*Math.max(ln, 0);
		rgbCalculated[1] += light.getG()*intersection.getKdg()*Math.max(ln, 0);
		rgbCalculated[2] += light.getB()*intersection.getKdb()*Math.max(ln, 0);
	}
	
	/**
	 * Adds diffuse component to RGB color data.
	 * 
	 * @param light				Light source to provide color data.
	 * @param ray				Ray used to find intersection.
	 * @param rgbCalculated		RGB color data (which will be filled by results).
	 * @param intersection		Intersection to focus on.
	 */
    private static void addReflectiveComponent(LightSource light, Ray ray, double[] rgbCalculated, RayIntersection intersection) {
		Point3D n = intersection.getNormal();
		Point3D l = light.getPoint().sub(intersection.getPoint());
		Point3D lProjectionOnN = n.scalarMultiply(l.scalarProduct(n));
		Point3D r = lProjectionOnN.add(lProjectionOnN.negate().add(l).scalarMultiply(-1));
		Point3D v = ray.start.sub(intersection.getPoint());
		double cos = r.normalize().scalarProduct(v.normalize());
	    
		if(Double.compare(cos, 0) >= 0) {
	    	cos = Math.pow(cos, intersection.getKrn());
		    
			rgbCalculated[0] += light.getR()*intersection.getKrr()*cos;
			rgbCalculated[1] += light.getG()*intersection.getKrg()*cos;
			rgbCalculated[2] += light.getB()*intersection.getKrb()*cos;
	    }
	}
}
© 2018 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
API
Training
Shop
Blog
About
Press h to open a hovercard with more details.