package hr.fer.zemris.java.fractals;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import hr.fer.zemrirs.math.Complex;
import hr.fer.zemrirs.math.ComplexPolynomial;
import hr.fer.zemrirs.math.ComplexRootedPolynomial;
import hr.fer.zemris.java.fractals.viewer.FractalViewer;
import hr.fer.zemris.java.fractals.viewer.IFractalProducer;
import hr.fer.zemris.java.fractals.viewer.IFractalResultObserver;

/**
 * Allows user to input roots for drawing Newton-Raphson iteration-based
 * fractals.
 * 
 * @author tin
 *
 */
public class Newton {

  /**
   * String with which user signals end of input.
   */
  private static final String END_OF_INPUT = "done";

  /**
   * Method which starts when program starts.
   * 
   * @param args command line arguments
   */
  public static void main(String[] args) {
    System.out.println("Welcome to Newton-Raphson iteration-based fractal viewer.\n"
        + "Please enter at least two roots, one root per line. Enter 'done' when done.");

    List<Complex> roots = new ArrayList<>();
    Scanner scanner = new Scanner(System.in);
    while (true) {
      System.out.print("Root " + (roots.size() + 1) + "> ");
      String line = scanner.nextLine();

      if(line.equals(END_OF_INPUT)) {
        if(roots.size() < 2) {
          System.out.println("Not enough roots given. Exiting.");
        } else {
          System.out.println("Image of fractal will appear shortly. Thank you.");
          FractalViewer.show(new MyProducer(roots));
        }
        break;
      } else {
        try {
          roots.add(parseComplexNumber(line));
        } catch (Exception e) {
          System.out.println(e.getMessage());
        }

      }
    }

    scanner.close();
  }

  /**
   * Helper method used for parsing complex numbers from command line.
   * 
   * @param line string containing complex number
   * @return parsed {@link Complex} number
   */
  private static Complex parseComplexNumber(String s) {
    s = s.replaceAll("\\s+", "");
    Pattern pattern = Pattern.compile("([-]?[0-9]+([.][0-9]+)?)|([-]?i([0-9]+([.][0-9]+)?)?)");
    Matcher matcher = pattern.matcher(s);
    double real = 0;
    double imaginary = 0;
    boolean hasReal = false;
    boolean hasImaginary = false;

    while (matcher.find()) {
      if(matcher.group(1) != null) {
        real = Double.parseDouble(matcher.group(1)) + 0.0;
        hasReal = true;
      } else if(matcher.group(3) != null) {
        hasImaginary = true;
        if(matcher.group(3).equals("i")) {
          imaginary = 1;
        } else if(matcher.group(3).equals("-i")) {
          imaginary = -1;
        }else {
          imaginary = Double.parseDouble(matcher.group(3).replace("i", "")) + 0.0;
        }
      }
    }
    if(!hasReal && !hasImaginary) {
      throw new IllegalArgumentException("Invalid input.");
    }

    System.out.println(real + " " + imaginary);
    return new Complex(real, imaginary);
  }

  /**
   * Calculates Newton-Raphson fractal on given interval.
   * 
   * @author tin
   *
   */
  public static class Calculate implements Callable<Void> {
    /**
     * Convergence treshold.
     */
    private static final double TRESHOLD = 0.001;
    double reMin;
    double reMax;
    double imMin;
    double imMax;
    int width;
    int height;
    int yMin;
    int yMax;
    int maxIterations;
    short[] data;
    ComplexRootedPolynomial rootedPolynomial;
    ComplexPolynomial polynomial;

    /**
     * Constructor.
     * 
     * @param reMin minimal real part
     * @param reMax maximal real part
     * @param imMin minimal imaginary part
     * @param imMax maximal imaginary part
     * @param width image width
     * @param height image height
     * @param yMin start of y axis
     * @param yMax end of y axis
     * @param maxIterations maximal number of iterations per pixel
     * @param data image pixel data
     * @param rootedPolynomial rootedPolynomial for which the fractal is drawn
     */
    public Calculate(double reMin, double reMax, double imMin, double imMax, int width, int height, int yMin, int yMax,
        int maxIterations, short[] data, ComplexRootedPolynomial rootedPolynomial) {
      this.reMin = reMin;
      this.reMax = reMax;
      this.imMin = imMin;
      this.imMax = imMax;
      this.width = width;
      this.height = height;
      this.yMin = yMin;
      this.yMax = yMax;
      this.maxIterations = maxIterations;
      this.data = data;
      this.rootedPolynomial = rootedPolynomial;
      this.polynomial = rootedPolynomial.toComplexPolynom();
    }

    @Override
    public Void call() throws Exception {
      int offset = yMin * width;
      int xMin = 0;
      int xMax = width;
      for (int y = yMin; y < yMax; y++) {
        for (int x = xMin; x < xMax; x++) {
          Complex c = new Complex(x / (width - 1.0) * (reMax - reMin) + reMin,
              (height - 1.0 - y) / (height - 1) * (imMax - imMin) + imMin);
          Complex zn = new Complex(c.getReal(), c.getImaginary());
          int i = 0;
          double module = 1;
          while(module > 0.002 && i < maxIterations) {
            Complex numerator = rootedPolynomial.apply(zn);
            Complex denominator = polynomial.derive().apply(zn);
            Complex fraction = numerator.divide(denominator);
            Complex zn1 = zn.sub(fraction);
            module = zn1.sub(zn).module();
            zn = zn1;
            i++;
          }
          int index = rootedPolynomial.indexOfClosestRootFor(zn, TRESHOLD);
          if(index == -1) {
            data[offset++] = 0;
          }
          else {
            data[offset++] = (short) index;
          }
        }
      }
      return null;
    }

  }

  /**
   * Implements work producer which creates fixed thread pool. Produce method will
   * be called each time a calculation should be performed.
   * 
   * @author tin
   *
   */
  public static class MyProducer implements IFractalProducer {
    /**
     * List of roots.
     */
    private List<Complex> roots;
    /**
     * Fixed thread pool.
     */
    private ExecutorService pool;
    /**
     * Representation of polynomial.
     */
    private ComplexRootedPolynomial rootedPolynomial;
    /**
     * Polynomial.
     */
    private ComplexPolynomial polynomial;

    /**
     * Constructor.
     * 
     * @param roots polynomial roots.
     */
    public MyProducer(List<Complex> roots) {
      this.roots = roots;
      rootedPolynomial = new ComplexRootedPolynomial(this.roots);
      polynomial = rootedPolynomial.toComplexPolynom();
      pool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), new DaemonicThreadFactory());
    }

    /**
     * Class implements daemonic thread factory. Uses default thread factory to
     * create threads and sets daemon flag to be true.
     * 
     * @author tin
     *
     */
    private class DaemonicThreadFactory implements ThreadFactory {
      @Override
      public Thread newThread(Runnable arg0) {
        Thread thread = Executors.defaultThreadFactory().newThread(arg0);
        thread.setDaemon(true);
        return thread;
      }
    }

    @Override
    public void produce(double reMin, double reMax, double imMin, double imMax, int width, int height, long requestNo,
        IFractalResultObserver observer) {
      System.out.println("Calculating...");
      short[] data = new short[height * width];
      int maxIterations = 16 * 16 * 16;
      int numberOfJobs = height / 8 * Runtime.getRuntime().availableProcessors();
      int numberOfYPerJob = height / numberOfJobs;

      List<Future<Void>> results = new ArrayList<>();

      for (int i = 0; i < numberOfJobs; i++) {
        int yMin = i * numberOfYPerJob;
        int yMax = (i+1) * numberOfYPerJob;
        if(i == numberOfJobs - 1) {
          yMax = height - 1;
        }
        Calculate calculate = new Calculate(reMin, reMax, imMin, imMax, width, height, yMin, yMax, maxIterations, data,
            rootedPolynomial);
        results.add(pool.submit(calculate));
      }

      for (Future<Void> calculate : results) {
        try {
          calculate.get();
        } catch (Exception e) {
        }
      }

      observer.acceptResult(data, (short) (polynomial.order() + 1), requestNo);
    }
  }
}
